#!/opt/homebrew/bin/zsh

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#                   (Handy reference: https://chromium.googlesource.com/chromium/src/+/lkgr/ui/events/keycodes/keyboard_code_conversion_mac.mm)
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# Modal mode. Inspired by:
#   <https://gist.github.com/pkazmier/213d9dce6b1ea313eaf0a17b017c2b08>
# With a little help from:
#   <https://github.com/nikhgupta/dotfiles/blob/osx/config/skhd/skhdrc>

:: default : yabai -m config normal_window_opacity 1.0; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity off
:: focus @ : yabai -m config normal_window_opacity 0.9; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity on
:: swap @ : yabai -m config normal_window_opacity 0.9; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity on
:: warp @ : yabai -m config normal_window_opacity 0.9; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity on
:: warpnf @ : yabai -m config normal_window_opacity 0.9; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity on
:: resize @ : yabai -m config normal_window_opacity 0.9; yabai -m config active_window_opacity 1.0; yabai -m config window_opacity on

# Ctrl+space is the global hotkey to toggle modal mode. Always starts in focus
# mode. Escape quits modal mode.
default < ctrl - space ; focus
focus, swap, warp, warpnf, resize < ctrl - space ; default
focus, swap, warp, warpnf, resize < escape ; default

# Once in modal mode, switch modes with a single keystroke.
focus, swap, warp, warpnf, resize < f ; focus
focus, swap, warp, warpnf, resize < s ; swap
focus, swap, warp, warpnf, resize < r ; resize
focus, swap, warp, warpnf, resize < w ; warp
focus, swap, warp, warpnf, resize < shift - w ; warpnf

# Available in all modes.
focus, swap, warp, warpnf, resize < space : yabai -m space --rotate 90
focus, swap, warp, warpnf, resize < shift - space : yabai -m space --rotate 270
focus, swap, warp, warpnf, resize < x : yabai -m space --mirror x-axis
focus, swap, warp, warpnf, resize < y : yabai -m space --mirror y-axis
focus, swap, warp, warpnf, resize < e : yabai -m space --balance
focus, swap, warp, warpnf, resize < shift - e : yabai -m space --balance y-axis
focus, swap, warp, warpnf, resize < alt - e : yabai -m space --balance x-axis
focus, swap, warp, warpnf, resize < q ; default

# Change focus using standard vi directional keys. Enter changes foucs to the
# biggest window.
focus < k : yabai -m window --focus north
focus < j : yabai -m window --focus south
focus < h : yabai -m window --focus west
focus < l : yabai -m window --focus east
focus < return : yabai -m window --focus largest

# Change the next insertion point using standard vi directional keys. As these
# operations are intended for the next window that is opened, exit focus mode
# immediately.
focus < cmd - k : yabai -m window --insert north; skhd -k "ctrl - space"
focus < cmd - j : yabai -m window --insert south; skhd -k "ctrl - space"
focus < cmd - h : yabai -m window --insert west; skhd -k "ctrl - space"
focus < cmd - l : yabai -m window --insert east; skhd -k "ctrl - space"
focus < cmd - return : yabai -m window --toggle float; skhd -k "ctrl - space"

# Change the moitor using numbers corresponding to each or cycle through them
# using tab and shift - tab.
focus < 1 : yabai -m display --focus 1
focus < 2 : yabai -m display --focus 2
focus < tab : yabai -m display --focus next
focus < shift - tab : yabai -m display --focus prev

# Prefix with cmd to change the space focus
focus < cmd - 1 : yabai -m space --focus 1
focus < cmd - 2 : yabai -m space --focus 2
focus < cmd - 3 : yabai -m space --focus 3
focus < cmd - 4 : yabai -m space --focus 4
focus < cmd - 5 : yabai -m space --focus 5
focus < cmd - 6 : yabai -m space --focus 6
focus < cmd - 7 : yabai -m space --focus 7
focus < cmd - 8 : yabai -m space --focus 8
focus < cmd - 9 : yabai -m space --focus 9
focus < cmd - 0 : yabai -m space --focus 10
focus < cmd - tab : yabai -m space --focus next
focus < shift + cmd - tab : yabai -m space --focus prev

# Swap windows using standard vi directional keys
swap < k : yabai -m window --swap north
swap < j : yabai -m window --swap south
swap < h : yabai -m window --swap west
swap < l : yabai -m window --swap east

# Warp windows using standard vi directional keys. Same bindings for warp and
# warpnf.
warp, warpnf < k : yabai -m window --warp north
warp, warpnf < j : yabai -m window --warp south
warp, warpnf < l : yabai -m window --warp east
warp, warpnf < h : yabai -m window --warp west
warp, warpnf < return : yabai -m window --warp largest

# Warp window to monitor and follow.
warp < 1 : yabai -m window --display 1; yabai -m display --focus 1
warp < 2 : yabai -m window --display 2; yabai -m display --focus 2
warp < tab : yabai -m window --display next; yabai -m display --focus next
warp < shift - tab : yabai -m window --display prev; yabai -m display --focus prev

# Prefix with cmd to warp to desktop and follow.
warp < cmd - 1 : yabai -m window --space 1; yabai -m space --focus 1
warp < cmd - 2 : yabai -m window --space 2; yabai -m space --focus 2
warp < cmd - 3 : yabai -m window --space 3; yabai -m space --focus 3
warp < cmd - 4 : yabai -m window --space 4; yabai -m space --focus 4
warp < cmd - 5 : yabai -m window --space 5; yabai -m space --focus 5
warp < cmd - 6 : yabai -m window --space 6; yabai -m space --focus 6
warp < cmd - 7 : yabai -m window --space 7; yabai -m space --focus 7
warp < cmd - 8 : yabai -m window --space 8; yabai -m space --focus 8
warp < cmd - 9 : yabai -m window --space 9; yabai -m space --focus 9
warp < cmd - 0 : yabai -m window --space 10; yabai -m space --focus 10

# Warp to monitor but do not follow.
warpnf < 1 : yabai -m window --display 1
warpnf < 2 : yabai -m window --display 2
warpnf < tab : yabai -m window --display next
warpnf < shift - tab : yabai -m window --display prev

# Prefix with cmd to warp to desktop but do not follow.
warpnf < cmd - 1 : yabai -m window --space 1
warpnf < cmd - 2 : yabai -m window --space 2
warpnf < cmd - 3 : yabai -m window --space 3
warpnf < cmd - 4 : yabai -m window --space 4
warpnf < cmd - 5 : yabai -m window --space 5
warpnf < cmd - 6 : yabai -m window --space 6
warpnf < cmd - 7 : yabai -m window --space 7
warpnf < cmd - 8 : yabai -m window --space 8
warpnf < cmd - 9 : yabai -m window --space 9
warpnf < cmd - 0 : yabai -m window --space 10

shift + ctrl - n : current="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index')" \
                    && yabai -m space --create \
                    && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
                    && yabai -m space "$index" --move "$((current + 1))" \
                    && yabai -m space --focus "$((current + 1))"

# destroy desktop
shift + ctrl - w : previous="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index - 1')" \
                    && yabai -m space --destroy \
                    && yabai -m window --space "$previous"; yabai -m space --focus "$previous"
# shift + ctrl - w : yabai -m space --destroy

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + ctrl + alt - n : yabai -m space --create \
                    && current_space="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false and ."is-visible" == true))[0].index')" \
                              last_space="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
                              target_space=$((current_space + 1)) \
                    && yabai -m space "$last_space" --move "$target_space"; yabai -m window --space "$target_space" \
                    && yabai -m space --focus "$target_space"

# shift + ctrl + alt - n : current="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index')" \
#                   && yabai -m space --create \
#                   && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
#                   && yabai -m window --space "$index" \
#                   && yabai -m space "$index" --move "$((current + 1))" \
#                   && yabai -m space --focus "$((current + 1))"

# swap spaces
shift + ctrl + alt - h : yabai -m space --swap prev
shift + ctrl + alt - l : yabai -m space --swap next

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# center window on screen
ctrl + alt - tab : current_display="$(yabai -m query --displays --display | jq '.index')" \
                      && frontmost_width="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.w')" \
                      && frontmost_height="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.h')" \
                      && display_width="$(yabai -m query --displays --display | jq '.frame.w')" \
                      && display_height="$(yabai -m query --displays --display | jq '.frame.h')" \
                      && x_offset="$(( (display_width - frontmost_width) / 2 ))" \
                      && y_offset="$(( (display_height - frontmost_height) / 4 ))" \
                      && yabai -m window --move "abs:$x_offset:$y_offset"

# float / unfloat window and center on screen
ctrl - t : current_display="$(yabai -m query --displays --display | jq '.index')" \
          && frontmost_width="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.w')" \
          && frontmost_height="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.h')" \
          && display_width="$(yabai -m query --displays --display | jq '.frame.w')" \
          && display_height="$(yabai -m query --displays --display | jq '.frame.h')" \
          && display_left="$(yabai -m query --displays --display | jq '.frame.x')" \
          && display_top="$(yabai -m query --displays --display | jq '.frame.y')" \
          && x_offset="$(( (display_width - frontmost_width + display_left) / 2 ))" \
          && y_offset="$(( (display_height - frontmost_height + display_top) / 4 ))" \
          && yabai -m window --toggle float \
          && yabai -m window --move "abs:$x_offset:$y_offset"

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# shift + ctrl + alt - esc : launchctl kickstart

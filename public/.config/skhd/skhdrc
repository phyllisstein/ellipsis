#!/opt/homebrew/bin/zsh

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#                   (Handy reference: https://chromium.googlesource.com/chromium/src/+/lkgr/ui/events/keycodes/keyboard_code_conversion_mac.mm)
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

################################################################################
################################# Modal Config #################################
################################################################################
# Inspired by: <https://gist.github.com/pkazmier/213d9dce6b1ea313eaf0a17b017c2b08>
# With a little help from: <https://github.com/nikhgupta/dotfiles/blob/osx/config/skhd/skhdrc>



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Example ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# 1. Press `ctrl-space` to enter focus mode.
# 2. Press `2` to move focus to the second display from the left.
# 3. Press `h` to focus the window to the left of the currently focused window.
# 4. Press `s` to switch into swap mode.
# 5. Press `j` to swap the current focused window with the window below.
# 6. Press `return` to exit the active mode and return to default.



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define Modes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Everything after the colon is a command skhd executes on entering that mode.
# In any mode but default mode, yabai shows borders around windows. They are
# removed on switching back to default mode. (A border width of 5 goes well with
# a yabai window_gap of 6.)
:: default : yabai -m config window_border_width 0; yabai -m config window_border off
:: focus @ : yabai -m config window_border_width 5; yabai -m config window_border on
:: swap @ : yabai -m config window_border_width 5; yabai -m config window_border on
:: warp @ : yabai -m config window_border_width 5; yabai -m config window_border on
:: warpnf @ : yabai -m config window_border_width 5; yabai -m config window_border on
:: resize @ : yabai -m config window_border_width 5; yabai -m config window_border on



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Default Mode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# The default mode yields control back to your normal apps. The only shortcut
# available in default mode (that is, the only global shortcut) is `ctrl -
# space`. Pressing `ctrl-space` toggles the modal interface, starting with focus
# mode.
default < ctrl - space ; focus



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Global Mode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# These escape hatches back to normal mode in any of the configured modes. `ctrl
# - space`, `escape`, `q`, and `return` will always jump directly to default mode, in
# which skhd is not listening for further keystrokes.
focus, swap, warp, warpnf, resize < ctrl - space ; default
focus, swap, warp, warpnf, resize < escape ; default
focus, swap, warp, warpnf, resize < q ; default
focus, swap, warp, warpnf, resize < return ; default

# These keystrokes are available in any mode for quickly switching to another
# mode. For instance, pressing `f` in swap mode will activate focus mode.
focus, swap, warp, warpnf, resize < f ; focus
focus, swap, warp, warpnf, resize < s ; swap
focus, swap, warp, warpnf, resize < r ; resize
focus, swap, warp, warpnf, resize < w ; warp
focus, swap, warp, warpnf, resize < shift - w ; warpnf

# These common operations are also available in any mode: pressing `space` will
# always rotate your windows 90Â° clockwise, without dropping you out of the
# current mode.
focus, swap, warp, warpnf, resize < space : yabai -m space --rotate 90
focus, swap, warp, warpnf, resize < shift - space : yabai -m space --rotate 270
focus, swap, warp, warpnf, resize < x : yabai -m space --mirror x-axis
focus, swap, warp, warpnf, resize < y : yabai -m space --mirror y-axis
focus, swap, warp, warpnf, resize < e : yabai -m space --balance
focus, swap, warp, warpnf, resize < shift - e : yabai -m space --balance y-axis
focus, swap, warp, warpnf, resize < alt - e : yabai -m space --balance x-axis



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Focus Mode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Focus mode moves "active" state between windows and displays. This mode is the
# default, and activates as soon as you press `ctrl - space`. You can also
# activate focus mode by pressing the `f` key within another mode.

# Change focus using standard vi directional keys. Enter changes foucs to the
# biggest window.
focus < k : yabai -m window --focus north
focus < j : yabai -m window --focus south
focus < h : yabai -m window --focus west
focus < l : yabai -m window --focus east

# Change the next insertion point using standard vi directional keys. As these
# operations are intended for the next window that is opened, exit focus mode
# immediately.
focus < cmd - k : yabai -m window --insert north; skhd -k "ctrl - space"
focus < cmd - j : yabai -m window --insert south; skhd -k "ctrl - space"
focus < cmd - h : yabai -m window --insert west; skhd -k "ctrl - space"
focus < cmd - l : yabai -m window --insert east; skhd -k "ctrl - space"

# Change the moitor using numbers corresponding to each or cycle through them
# using tab and shift - tab. If you have multiple displays attached to your
# computer, keybindings move from leftmost (1) to rightmost (3) display, as
# arranged, not based on primary/secondary designation.
focus < 1 : yabai -m display --focus "$(yabai -m query --displays | jq 'sort_by(.frame.x)[0].index')"
focus < 2 : yabai -m display --focus "$(yabai -m query --displays | jq 'sort_by(.frame.x)[1].index')"
focus < 3 : yabai -m display --focus "$(yabai -m query --displays | jq 'sort_by(.frame.x)[2].index')"
focus < tab : yabai -m display --focus next
focus < shift - tab : yabai -m display --focus prev

# Hold command when inputting a number to move focus between Mission Control
# spaces.
focus < cmd - 1 : yabai -m space --focus 1
focus < cmd - 2 : yabai -m space --focus 2
focus < cmd - 3 : yabai -m space --focus 3
focus < cmd - 4 : yabai -m space --focus 4
focus < cmd - 5 : yabai -m space --focus 5
focus < cmd - 6 : yabai -m space --focus 6
focus < cmd - 7 : yabai -m space --focus 7
focus < cmd - 8 : yabai -m space --focus 8
focus < cmd - 9 : yabai -m space --focus 9
focus < cmd - 0 : yabai -m space --focus 10
focus < cmd - tab : yabai -m space --focus next
focus < shift + cmd - tab : yabai -m space --focus prev


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Swap Mode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Swap the active window in for another partition, and swap that partition's
# window into the active window's partition. Swap mode can be activated by
# pressing `s` in any other mode.

swap < k : yabai -m window --swap north
swap < j : yabai -m window --swap south
swap < h : yabai -m window --swap west
swap < l : yabai -m window --swap east

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Warp Mode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Instead of swapping windows, insert the active window into another screen
# partition. Warp mode can be activated by pressing `w` in any other mode. A
# special form of warp mode, `warpnf`, can be activated by pressing `shift - w`.
# `warpnf` applies to display and desktop warp operations. It warps the window
# without moving focus to its destination.

warp, warpnf < k : yabai -m window --warp north
warp, warpnf < j : yabai -m window --warp south
warp, warpnf < l : yabai -m window --warp east
warp, warpnf < h : yabai -m window --warp west

# Warp window to monitor and follow.
warp < 1 : display_idx="$(yabai -m query --displays | jq 'sort_by(.frame.x)[0].index')"; \
              yabai -m window --display "$display_idx"; \
              yabai -m display --focus "$display_idx"
warp < 2 : display_idx="$(yabai -m query --displays | jq 'sort_by(.frame.x)[1].index')"; \
              yabai -m window --display "$display_idx"; \
              yabai -m display --focus "$display_idx"
warp < 3 : display_idx="$(yabai -m query --displays | jq 'sort_by(.frame.x)[2].index')"; \
              yabai -m window --display "$display_idx"; \
              yabai -m display --focus "$display_idx"
warp < tab : yabai -m window --display next; yabai -m display --focus next
warp < shift - tab : yabai -m window --display prev; yabai -m display --focus prev

# Prefix with cmd to warp to desktop and follow.
warp < cmd - 1 : yabai -m window --space 1; yabai -m space --focus 1
warp < cmd - 2 : yabai -m window --space 2; yabai -m space --focus 2
warp < cmd - 3 : yabai -m window --space 3; yabai -m space --focus 3
warp < cmd - 4 : yabai -m window --space 4; yabai -m space --focus 4
warp < cmd - 5 : yabai -m window --space 5; yabai -m space --focus 5
warp < cmd - 6 : yabai -m window --space 6; yabai -m space --focus 6
warp < cmd - 7 : yabai -m window --space 7; yabai -m space --focus 7
warp < cmd - 8 : yabai -m window --space 8; yabai -m space --focus 8
warp < cmd - 9 : yabai -m window --space 9; yabai -m space --focus 9
warp < cmd - 0 : yabai -m window --space 10; yabai -m space --focus 10

# Warp to monitor but do not follow.
warpnf < 1 : yabai -m window --display "$(yabai -m query --displays | jq 'sort_by(.frame.x)[0].index')"
warpnf < 2 : yabai -m window --display "$(yabai -m query --displays | jq 'sort_by(.frame.x)[1].index')"
warpnf < 3 : yabai -m window --display "$(yabai -m query --displays | jq 'sort_by(.frame.x)[2].index')"
warpnf < tab : yabai -m window --display next
warpnf < shift - tab : yabai -m window --display prev

# Prefix with cmd to warp to desktop but do not follow.
warpnf < cmd - 1 : yabai -m window --space 1
warpnf < cmd - 2 : yabai -m window --space 2
warpnf < cmd - 3 : yabai -m window --space 3
warpnf < cmd - 4 : yabai -m window --space 4
warpnf < cmd - 5 : yabai -m window --space 5
warpnf < cmd - 6 : yabai -m window --space 6
warpnf < cmd - 7 : yabai -m window --space 7
warpnf < cmd - 8 : yabai -m window --space 8
warpnf < cmd - 9 : yabai -m window --space 9
warpnf < cmd - 0 : yabai -m window --space 10

#!/bin/bash

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#                   (Handy reference: https://chromium.googlesource.com/chromium/src/+/lkgr/ui/events/keycodes/keyboard_code_conversion_mac.mm)
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north

# swap managed window
ctrl + alt - h : yabai -m window --swap west
ctrl + alt - l : yabai -m window --swap east
ctrl + alt - j : yabai -m window --swap south
ctrl + alt - k : yabai -m window --swap north

# move managed window
shift + ctrl - h : yabai -m window --warp west
shift + ctrl - l : yabai -m window --warp east
shift + ctrl - j : yabai -m window --warp south
shift + ctrl - k : yabai -m window --warp north

# resize window
alt + ctrl - h : yabai -m window --resize left:-20:0
alt + ctrl - l : yabai -m window --resize right:20:0
alt + ctrl - j : yabai -m window --resize bottom:0:20
alt + ctrl - k : yabai -m window --resize top:0:-20

# move window to space
alt - pageup : yabai -m window --space prev
alt - pagedown : yabai -m window --space next
alt + ctrl - pageup : yabai -m window --space prev
alt + ctrl - pagedown : yabai -m window --space next
shift + ctrl - home : yabai -m window --space prev && yabai -m space --focus prev
shift + ctrl - end : yabai -m window --space next && yabai -m space --focus next

# balance size of windows
# alt + shift - 0x18  : yabai -m window --resize top_right:50:50
# alt - 0x1B : yabai -m window --resize top_right:-50:-50
ctrl + alt - return : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create and focus desktop
# shift + ctrl - n : yabai -m space --create \
#                     && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
#                     && yabai -m space --focus "$index"

shift + ctrl - n : current="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index')" \
                    && yabai -m space --create \
                    && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
                    && yabai -m space "$index" --move "$((current + 1))" \
                    && yabai -m space --focus "$((current + 1))"

# destroy desktop
shift + ctrl - w : previous="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index - 1')" \
                    && yabai -m space --destroy \
                    && yabai -m window --space "$previous"; yabai -m space --focus "$previous"
# shift + ctrl - w : yabai -m space --destroy

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + ctrl + alt - n : yabai -m space --create \
#                   && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
#                   && yabai -m window --space "$index" \
#                   && yabai -m space --focus "$index"
shift + ctrl + alt - n : current="$(yabai -m query --spaces --display | jq 'map(select(."has-focus" == true))[0].index')" \
                  && yabai -m space --create \
                  && index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" \
                  && yabai -m window --space "$index" \
                  && yabai -m space "$index" --move "$((current + 1))" \
                  && yabai -m space --focus "$((current + 1))"

# swap spaces
shift + ctrl + alt - h : yabai -m space --swap prev
shift + ctrl + alt - l : yabai -m space --swap next

# fast focus desktop
ctrl - 0x18 : yabai -m space --focus recent
ctrl - 1 : yabai -m space --focus 1
ctrl - 2 : yabai -m space --focus 2
ctrl - 3 : yabai -m space --focus 3
ctrl - 4 : yabai -m space --focus 4
ctrl - 5 : yabai -m space --focus 5
ctrl - 6 : yabai -m space --focus 6
ctrl - 7 : yabai -m space --focus 7
ctrl - 8 : yabai -m space --focus 8
ctrl - 9 : yabai -m space --focus 9

# send window to desktop and follow focus
# shift + ctrl - k : yabai -m window --space next; yabai -m space --focus next
# shift + ctrl - j : yabai -m window --space prev; yabai -m space --focus prev
# shift + ctrl - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
fn - 1 : yabai -m display --focus 1
fn - 2 : yabai -m display --focus 2
# ctrl + alt - 1  : yabai -m display --focus 1
# ctrl + alt - 2  : yabai -m diplay --focus 2

# send window to monitor and follow focus
fn + ctrl - 1  : yabai -m window --display 1; yabai -m display --focus 1
fn + ctrl - 2  : yabai -m window --display 2; yabai -m display --focus 2
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
# ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2

# send window to monitor
# alt - 0x32  : yabai -m window --display recent # alt - `
# ctrl + cmd - 1  : yabai -m window --display 1
# ctrl + cmd - 2  : yabai -m window --display 2

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# center window on screen
ctrl + alt - tab : current_display="$(yabai -m query --displays --display | jq '.index')" \
                      && frontmost_width="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.w')" \
                      && frontmost_height="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.h')" \
                      && display_width="$(yabai -m query --displays --display | jq '.frame.w')" \
                      && display_height="$(yabai -m query --displays --display | jq '.frame.h')" \
                      && x_offset="$(( (display_width - frontmost_width) / 2 ))" \
                      && y_offset="$(( (display_height - frontmost_height) / 4 ))" \
                      && yabai -m window --move "abs:$x_offset:$y_offset"

# float / unfloat window and center on screen
ctrl - t : current_display="$(yabai -m query --displays --display | jq '.index')" \
          && frontmost_width="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.w')" \
          && frontmost_height="$(yabai -m query --windows --space | jq 'map(select(."has-focus" == true))[0] | .frame.h')" \
          && display_width="$(yabai -m query --displays --display | jq '.frame.w')" \
          && display_height="$(yabai -m query --displays --display | jq '.frame.h')" \
          && display_left="$(yabai -m query --displays --display | jq '.frame.x')" \
          && display_top="$(yabai -m query --displays --display | jq '.frame.y')" \
          && x_offset="$(( (display_width - frontmost_width + display_left) / 2 ))" \
          && y_offset="$(( (display_height - frontmost_height + display_top) / 4 ))" \
          && yabai -m window --toggle float \
          && yabai -m window --move "abs:$x_offset:$y_offset"

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# shift + ctrl + alt - esc : launchctl kickstart

# rotate
f15 : yabai -m space --rotate 270
f13 : yabai -m space --rotate 90
f14 : yabai -m space --layout bsp

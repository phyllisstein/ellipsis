#!/usr/bin/env python3

from argparse import ArgumentParser
import fontforge
from pathlib import Path

parser = ArgumentParser(description='Rename fonts in bulk.')
parser.add_argument('paths', metavar='P', type=str, nargs=1, help='Font file search paths.')

def main(paths):
    font_paths = []
    for path in paths:
        font_paths = font_paths + sorted(list(Path(path).glob('**/*.otf')) + list(Path(path).glob('**/*.ttf')))

    for path in font_paths:
        print('Processing', path, '...')

        font = fontforge.open(str(path.resolve()))

        family_name = next((name[2] for name in font.sfnt_names if 'english' in str(name[0]).lower() and 'preferred family' in str(name[1]).lower()), font.familyname)

        otf_path = path.parent.joinpath(family_name, font.fontname).with_suffix(path.suffix).resolve()
        otf_path.parent.mkdir(parents=True, exist_ok=True)
        path.rename(otf_path)

        # font.generate(str(otf_path), flags=('opentype', 'no-hints', 'omit-instructions',))
        # font.generate(str(otf_path))

        # web_base = path.parent.joinpath(family_name, 'Web', font.fontname)
        # web_base.parent.mkdir(parents=True, exist_ok=True)

        # woff2_path = web_base.with_suffix('.woff2').resolve()

        # font.generate(str(woff2_path), flags=('opentype', 'no-hints', 'omit-instructions',))
        # font.generate(str(woff2_path))

        font.close()
        # path.unlink()

if __name__ == '__main__':
    args = parser.parse_args()
    main(args.paths)
